{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#modm-data-semantic-hardware-description","title":"modm-data: Semantic Hardware Description","text":"<p>This project is a collection of data processing pipelines that convert and combine multiple sources of hardware description data into the most accurate common representation without manual supervision.</p> <p>There are many different supported input sources per hardware vendor:</p> <ul> <li>PDF technical documentation, especially datasheets and reference manuals.</li> <li>Source code and CMSIS-SVD files describing peripheral registers.</li> <li>Vendor libraries for helping with naming things canonically.</li> <li>Proprietary databases extracted from vendor tooling.</li> </ul> <p>These input sources are made accessible via deterministic data pipelines before finally merging them together. This approach has the best chance of compensating weaknesses in each individual input source while also arbitrating conflicts. The output formats are knowledge graphs with a shared ontology.</p> <p>The resulting knowledge graphs represent a normalized and complete semantic description of the hardware and are NOT intended to be used directly. Rather, you should extract the data you require and convert it into a format that is useful for your specific use case and device scope. This repository only contains data pipeline code, therefore, if you are interested in the hardware description data only, please use the resulting knowledge graphs directly.</p> <p>Warning The project is still in beta and not fully functional or documented. Improving the documentation and flexibility of the <code>modm_data.pdf2html</code> submodule is the main focus of development right now. No output data other than HTML is currently supported.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install this Python \u22653.11 project via PyPi:</p> <pre><code>pip install modm-data\n</code></pre> <p>You also need <code>g++</code> and <code>patch</code> installed and callable in your path.</p>"},{"location":"#pipelines","title":"Pipelines","text":"<p>The data pipelines are implemented as Python submodules inside <code>modm_data</code> folder and have the following structure:</p> <pre><code>flowchart LR\n    A(PDF) --&gt;|pdf2html| B\n    B --&gt;|html2svd| D\n    B(HTML) --&gt;|html| C\n    C(Python) --&gt;|owl| E\n    D(CMSIS-SVD) --&gt;|cmsis-svd| C\n    E[OWL]\n    F(CMSIS\\nHeader) --&gt;|header2svd| D\n    G(CubeMX) --&gt;|cubemx| C\n    H(CubeHAL) --&gt;|cubehal| C\n    J --&gt;|dl| A\n    J --&gt;|dl| F\n    J --&gt;|dl| G\n    J --&gt;|dl| H\n    J[Vendor] --&gt;|dl| D</code></pre> <p>Each pipeline has its own command-line interface, please refer to the API documentation for their advanced usage.</p>"},{"location":"#citation","title":"Citation","text":"<p>This project is a further development of a peer-reviewed paper published in the in the Journal of Systems Research (JSys). Please cite this paper when referring to this project:</p> <pre><code>@article{hauser2023automatically,\n  title={{Automatically Extracting Hardware Descriptions from PDF Technical Documentation}},\n  author={Hauser, Niklas and Pennekamp, Jan},\n  journal={Journal of Systems Research (JSys)},\n  volume={3},\n  issue={2},\n  year={2023},\n  doi={10.5070/tbd}\n}\n</code></pre> <p>The paper itself is based on a master thesis.</p>"}]}