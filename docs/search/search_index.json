{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#modm-data-semantic-hardware-description","title":"modm-data: Semantic Hardware Description","text":"<p>This project is a collection of data processing pipelines that convert and combine multiple sources of hardware description data into the most accurate common representation without manual supervision.</p> <p>There are many different supported input sources per hardware vendor:</p> <ul> <li>PDF technical documentation, especially datasheets and reference manuals.</li> <li>Source code and CMSIS-SVD files describing peripheral registers.</li> <li>Vendor libraries for helping with naming things canonically.</li> <li>Proprietary databases extracted from vendor tooling.</li> </ul> <p>These input sources are made accessible via deterministic data pipelines before finally merging them together. This approach has the best chance of compensating weaknesses in each individual input source while also arbitrating conflicts. The output formats are knowledge graphs with a shared ontology.</p> <p>The resulting knowledge graphs represent a normalized and complete semantic description of the hardware and are NOT intended to be used directly. Rather, you should extract the data you require and convert it into a format that is useful for your specific use case and device scope. This repository only contains data pipeline code, therefore, if you are interested in the hardware description data only, please use the resulting knowledge graphs directly.</p> <p>Warning The project is still in beta and not fully functional or documented. Improving the documentation and flexibility of the <code>modm_data.pdf2html</code> submodule is the main focus of development right now. No output data other than HTML is currently supported.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install this Python \u22653.11 project via PyPi:</p> <pre><code>pip install modm-data\n</code></pre> <p>You also need <code>g++</code> and <code>patch</code> installed and callable in your path.</p>"},{"location":"#pipelines","title":"Pipelines","text":"<p>The data pipelines are implemented as Python submodules inside <code>modm_data</code> folder and have the following structure:</p> <pre><code>flowchart LR\n    A(PDF) --&gt;|pdf2html| B\n    B --&gt;|html2svd| D\n    B(HTML) --&gt;|html| C\n    C(Python) --&gt;|owl| E\n    D(CMSIS-SVD) --&gt;|cmsis-svd| C\n    E[OWL]\n    F(CMSIS\\nHeader) --&gt;|header2svd| D\n    G(CubeMX) --&gt;|cubemx| C\n    H(CubeHAL) --&gt;|cubehal| C\n    J --&gt;|dl| A\n    J --&gt;|dl| F\n    J --&gt;|dl| G\n    J --&gt;|dl| H\n    J[Vendor] --&gt;|dl| D</code></pre> <p>Each pipeline has its own command-line interface, please refer to the API documentation for their advanced usage.</p>"},{"location":"#citation","title":"Citation","text":"<p>This project is a further development of a peer-reviewed paper published in the in the Journal of Systems Research (JSys). Please cite this paper when referring to this project:</p> <pre><code>@article{HP23,\n  author = {Hauser, Niklas and Pennekamp, Jan},\n  title = {{Automatically Extracting Hardware Descriptions from PDF Technical Documentation}},\n  journal = {Journal of Systems Research},\n  year = {2023},\n  volume = {3},\n  number = {1},\n  publisher = {eScholarship Publishing},\n  month = {10},\n  doi = {10.5070/SR33162446},\n  code = {https://github.com/salkinium/pdf-data-extraction-jsys-artifact},\n  code2 = {https://github.com/modm-io/modm-data},\n  meta = {},\n}\n</code></pre> <p>The paper itself is based on a master thesis.</p>"},{"location":"pipeline/header2svd/","title":"CMSIS Header to SVD Pipeline","text":""},{"location":"pipeline/header2svd/#selective-conversion","title":"Selective Conversion","text":"<p>The resulting SVD files are found in <code>ext/stmicro/svd</code>. Only takes a few minutes.</p> <pre><code># Convert a group of devices into SVD files\npython3 -m modm_data.header2svd.stmicro --device stm32f030c6t6 --device stm32f030f4p6 --device stm32f030k6t6\n# Convert all CMSIS headers into SVD files\npython3 -m modm_data.header2svd.stmicro --all\n</code></pre>"},{"location":"pipeline/header2svd/#automatic-conversion","title":"Automatic Conversion","text":"<p>To perform the steps automatically, you may also use <code>make</code>:</p> <pre><code># Using make\nmake convert-stmicro-header-svd\n# Remove all svd files\nmake clean-stmicro-svd\n</code></pre>"},{"location":"pipeline/html2owl/","title":"HTML to OWL Pipeline","text":""},{"location":"pipeline/html2owl/#selective-conversion","title":"Selective Conversion","text":"<p>The resulting knowledge graphs are found in <code>ext/stmicro/owl</code>. Sadly owlready2 does not sort the XML serialization, so the graphs change with every call, making diffs impractical. Only takes a few minutes.</p> <pre><code># Convert a single HTML folder to OWL using table processing\npython3 -m modm_data.html2owl.stmicro --document ext/stmicro/html/DS11581-v6\n# Convert ALL HTML folders using multiprocessing with #CPUs jobs\npython3 -m modm_data.html2owl.stmicro --all\n</code></pre>"},{"location":"pipeline/html2owl/#automatic-conversion","title":"Automatic Conversion","text":"<p>To perform the steps automatically, you may also use <code>make</code>:</p> <pre><code># Generate all owl files\nmake convert-stmicro-html-owl\n# Remove all generated OWL Graphs\nmake clean-stmicro-owl\n</code></pre>"},{"location":"pipeline/html2svd/","title":"HTML to SVD Pipeline","text":""},{"location":"pipeline/html2svd/#selective-conversion","title":"Selective Conversion","text":"<p>The resulting SVD files are found in <code>ext/stmicro/svd</code>. Only takes a few minutes.</p> <pre><code># Convert a single HTML folder to SVD using table processing\npython3 -m modm_data.html2svd.stmicro --document ext/stmicro/html/RM0432-v9\n# Convert ALL HTML folders using multiprocessing\npython3 -m modm_data.html2svd.stmicro --all\n</code></pre>"},{"location":"pipeline/html2svd/#automatic-conversion","title":"Automatic Conversion","text":"<p>To perform the steps automatically, you may also use <code>make</code>:</p> <pre><code># Conversion using make\nmake convert-stmicro-html-svd\n# Remove all svd files generated for rms\nmake clean-stmicro-html-svd\n</code></pre>"},{"location":"pipeline/overview/","title":"Overview","text":""},{"location":"pipeline/overview/#conversion-pipelines","title":"Conversion Pipelines","text":"<p>The data pipelines are implemented as Python submodules inside <code>modm_data</code> folder and have the following structure:</p> <pre><code>flowchart LR\n    A(PDF) --&gt;|pdf2html| B\n    B --&gt;|html2svd| D\n    B(HTML) --&gt;|html| C\n    C(Python) --&gt;|owl| E\n    D(CMSIS-SVD) --&gt;|cmsis-svd| C\n    E[OWL]\n    F(CMSIS\\nHeader) --&gt;|header2svd| D\n    G(CubeMX) --&gt;|cubemx| C\n    H(CubeHAL) --&gt;|cubehal| C\n    J --&gt;|dl| A\n    J --&gt;|dl| F\n    J --&gt;|dl| G\n    J --&gt;|dl| H\n    J[Vendor] --&gt;|dl| D</code></pre> <p>Currently supported are only these pipelines:</p> <ul> <li>PDF to HTML for all STMicro documents.</li> <li>HTML to SVD for STMicro STM32 Reference Manuals only.</li> <li>Header to SVD for STMicro STM32 CMSIS Header files.</li> </ul> <p>In particular, the conversion to OWL is prototyped, but not really useful yet.</p>"},{"location":"pipeline/pdf2html/","title":"PDF to HTML Pipeline","text":"<p>Conversion from PDF to HTML can be performed either selectively or for the entirety of PDF files from STMicro. Both ways are presented below.</p>"},{"location":"pipeline/pdf2html/#selective-conversion","title":"Selective Conversion","text":"<p>Examples of accessing STMicro PDFs with the <code>modm_data.pdf2html.stmicro</code> module:</p> <pre><code># show the raw AST of the first page\npython3 -m modm_data.pdf2html.stmicro --document DS11581-v6.pdf --page 1 --ast\n\n# show the normalized AST of the first 20 pages\npython3 -m modm_data.pdf2html.stmicro --document DS11581-v6.pdf --range :20 --tree\n\n# Overlay the graphical debug output on top of the input PDF\npython3 -m modm_data.pdf2html.stmicro --document DS11581-v6.pdf --page 1 --pdf --output test.html\n\n# Convert a single PDF page into HTML\npython3 -m modm_data.pdf2html.stmicro --document DS11581-v6.pdf --page 1 --html --output test.html\n\n# Convert the whole PDF into a single (!) HTML\npython3 -m modm_data.pdf2html.stmicro --document DS11581-v6.pdf --html --output test.html\n\n# Convert the whole PDF into a folder with multiple HTMLs using multiprocessing\npython3 -m modm_data.pdf2html.stmicro --document DS11581-v6.pdf --parallel --output DS11581\n</code></pre>"},{"location":"pipeline/pdf2html/#automatic-conversion","title":"Automatic Conversion","text":"<p>We recommend using the Makefile to convert all PDFs. This can take several hours! The parallelism depends on the number of CPU cores and amount of RAM. We recommend using 4-8 jobs at most. The Makefile also redirects the output of every conversion into the <code>log/</code> folder.</p> <pre><code># Conversion of a single datasheet\nmake ext/stmicro/html/DS11581-v6\n# or multiple PDFs\nmake ext/stmicro/html/DS11581-v6 ext/stmicro/html/RM0432-v9\n# Convert all PDFs (Datasheets, Reference Manuals)\nmake convert-stmicro-html -j4\n# Clean all PDFs\nmake clean-stmicro-html\n</code></pre> <p>Selective conversion of PDFs is also possible:</p> <pre><code># Data Sheets only\nmake convert-stmicro-html-ds\n# Reference Manuals only\nmake convert-stmicro-html-rm\n</code></pre>"},{"location":"source/overview/","title":"Overview","text":""},{"location":"source/overview/#input-sources","title":"Input Sources","text":"<p>You can download all input sources via <code>make input-sources</code>. Please note that it may take a while to download ~10GB of data, mostly PDF technical documentation.</p> <p>This project uses only publicly available data sources which we have aggregated in several GitHub repositories. However, since the copyright of some sources prohibits republication, these sources are downloaded from the vendor websites directly:</p> <ul> <li>STMicro CubeMX database.</li> <li>STMicro PDF technical documentation.</li> </ul>"}]}